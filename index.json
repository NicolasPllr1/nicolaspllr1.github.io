[{"content":" What is quantization ? \u0026lsquo;Quantization\u0026rsquo; refers to a broad class of algorithms. Their goal is to reduce the memory footprint of models while retaining as much performance as possible.\n$$\\text{Quantization} \\sim \\text{reducing the memory footprint of models}$$\nConsider the new Llama 3 70B.\nIf you load it in 32-bit precision on your GPU 1, it will require around (32 / 8) * 70 = 280 GB of VRAM ü•∂. For regular folks with access to 1 or 2 consumer GPUs at best, this memory cost is prohibitive and the model cannot be run 2.\nThis is where quantization kicks in to lower the memory required to run models.\nBefore we dive into data types, memory footprint calculations and specific quantization algorithms such as GPTQ, AWQ or HQQ, let\u0026rsquo;s understand why quantization in particular and model compression in general have become critical in modern AI.\nPlus-size AI AI models have been getting larger and larger.\nEpoch AI has a nice paper exploring this trend + their dataset is regularly updated. Look at the evolution of the parameter count from 1950 to 2024 :\nPay attention to the y-axis log scale. It indicates the parameter count order of magnitude - OOM. Notice how the slope is increasing. On this figure, every vertical increment represent a gain of a full order of magnitude !\nMeaning across the board, models have been gaining orders of magnitudes more parameters and this increase in size has been accelerating\nNatural language processing Consider the GPT series trained by OpenAI :\nQuick drawing I made - these GPTs sizes are well know as they were disclosed in OpenAI‚Äôs technical reports/papers/blog post.\nGaining 3 OOMs was achieved in ~ 2 years.\nMid 2018, OpenAI released GPT-1 with ~100M params 3. Next in 2019, they progressively released the GPT-2 models. The largest GPT-2 at 1.5B params was 10x larger than GPT-1 . Next mid 2020 they announced GPT-3 - but did not release the weights this time üò¢ - with an outstanding size of 175B parameters. Meaning ~100x GPT-2 size and 10x larger than any dense model at the time. Finally in March 2024 they announced GPT-4. Although this time they did not publicly disclose its architecture, it is rumored to be a 1.7T MoE so again a 10x increase in size compared to GPT-3 4.\nAnd it\u0026rsquo;s not just OpenAI‚Äôs GPTs. This trend can be observed across the board in the modern NLP history :\n(landmark model : its parameter count)\n1997, original LSTM : ~10k\n2014, Seq2Seq LSTM : ~400M\n2017, original Transformer : ~200M\n2018, BERT : base model at 110M and the large at 340M.\nearly 2023, Llama 1 : 7B, 13B, 33B, and 65B\nsummer 2023, Llama 2 : 7B, 13B and 70B\nApril 2024, Llama 3 : 8B, 70B and the 400B (!) version announced but not released yet\nIn 2024, almost all models have a parameter count in the billions ! Models having less than 10 billions parameters are often considered \u0026ldquo;small\u0026rdquo; ! For instance, the release of llama 3 8B has been much appreciated as its size makes it relatively small in the modern context of LLMs and it has been trained a lot. Making smaller models more capable is a recent trend that seems to be gaining traction. Andrej Karpathy for one has been pushing for smaller yet capable models and the recent Phi-3 model for example drives in this direction.\nComputer vision Same thing in computer vision although the latest models are not as large as the largest LLMs. Let‚Äôs compress aggressively modern computer vision history into a couple of milestone models : LeNet ‚Äî\u0026gt;AlexNet ‚Äî\u0026gt; ResNets, YOLOs ‚Äî\u0026gt; ViTs\nTimeline I made. See the increasing number of parameters :)\nIn short, models sizes across the board in the AI landscape have been exploding. And why you may ask ?\nWhy ? One major force that is driving this explosion is scaling laws.\nI won\u0026rsquo;t deep dive into this fascinating topic here - maybe in a future post :) .\nIf you want to get started, EpochAI literature review looks great 5.\nOn a personal note, I would recommend paper-wise reading OpenAI\u0026rsquo;s 2020 publications where they study scaling laws for GPTs performing language modeling up to 1B models, and then explore how their findings generalize to other AI tasks.\nScaling laws beautifully visualized - in OpenAI‚Äôs first paper mentioned above\nFinally, the 2022 Chinchilla paper which provides more precise scaling laws than OpenAI\u0026rsquo;s and estimates ‚Äúcompute optimal‚Äù training recipes.\nAnd obviously you should read Dwarkesh awesome article on scaling laws. Many many incredible pointers/references/ideas well-articulated and communicated in this piece written as a dialogue.\nThe costs of size Okay, models are huge. How is it a problem ?\n‚Äî\u0026gt; Training and inference costs increase with model size.\nWith crazy scale comes crazy numbers\nThere are several costs to consider. Some a causally linked like computation and energy.\nCosts to consider when training / running AI models :\nMemory to load models\nFLOPs to train or run inferences ~ energy, latency, throughput\nCluster maintenance becomes a challenge ~ infrastructure, skills, time\nThe larger the model the more ressources are needed to both train and simply run an inference. In terms of computation, costs for a single pass of training and or a single batch of inference are roughly 6 proportional to the model size i.e its parameter count.\nMental model on ‚Äúcompute‚Äù :\n$$\\text{compute} \\sim \\text{data} \\times \\text{params} \\sim \\text{params}$$\nSee below the consequence of larger models (and larger training datasets) on compute costs :\nCompute is driven by model and dataset sizes (source : Epoch AI \u0026lt;3)\nThe computation cost directly translates to the more fundamental energy cost. As a very concrete example laid out in the llama 2 paper, the training of the Llama 2 series required 3,311,616 \u0026gt; 3 billions GPU hours - and it‚Äôs your A100-with-80-GB kind of GPU hours. They estimated that this amount of compute corresponds to 539 tons of CO2e emitted. The largest llama model - at 70 billions parameters - required ~1,720,000 GPU hours ‚Äî\u0026gt; think a cluster of 6,000 A100s working full-time for 12 days.\nKarpathy in his intro talk to LLMs, these are ‚Äúrookie numbers‚Äù by today‚Äôs best models standard, ‚Äúoff by a factor of 10 or more‚Äù ‚Ä¶\nKarpathy : these are ‚Äò‚Äúrookie numbers‚Äù, ‚Äúoff by a factor of 10 or more‚Äù\nTraining models at this incredible scale requires crazy infrastructures. For the llama series, meta is leveraging 2 clusters totaling 48 000 GPUs 7. Maintaining the good health of such clusters becomes a technical challenge as discussed here for example.\nEstimating memory requirement. As a first estimation :\n$$\\text{Total mem. required} = \\text{#params} \\times \\text{(mem. per param)}$$\nStraightforward : to load the model, you have to load every parameters. Thus memory required is the sum of the memory required to load a single parameter.\nHow can we know the memory requirement of a single weight ? This is directly related to the ‚Äúprecision‚Äù chosen to represent this number in the computer. In scientific computing where a lot of precision is needed, real number are often represented with 64 bits. In Machine learning, it‚Äôs often 32 bits as this is already sufficient.\nI will not dive into the specifics of representing numbers in the computer here. This will be the topic of the next section. But knowing how many bits are used to store a single parameter, one can easy convert this to a number of bytes - 1 bytes = 8 bits. Finally, 1 billion bytes is exactly 1 GB. Given that models are often in the billions of parameters in size, you can easily estimate the memory requirement to hold the entire model in memory (be it the disk, the RAM or a GPU memory).\nModel compression via quantization General idea Model are getting larger and larger. On the one hand, larger sizes are driving AI progress. On the other hand, larger sizes come with costs :\nLoading models requires a lot of memory\nRunning/training models requires doing a ton of compute - FLOPs\nMemory and compute being fundamentally related to energy - and as a consequence money.\nIn order to benefit from powerful AI while diminishing the costs, one could try to compress models. The idea is would be to attack the problem at its root : model sizes.\nLLMs as an example As Andrej Karpathy so clearly summarizes, LLMs are lossy compressions of their training dataset. This is true in general in AI where one can think of models as big curves fitted on a dataset - think polynomial interpolation - Fran√ßois Chollet explains this all the time, here for instance. Thus data is compressed into the model through its parameters and computation graph.\nGiven all the general knowledge that models encapsulate - think your experience with chatGPT - you may believe that this compression is extremely precise and that tweaking a couple of parameters may throw everything off ‚Ä¶\nHowever this is absolutely not the case.\nAmong the billions of parameters, many if not most are rarely being activated and their contribution to performance - next word prediction for instance - is very negligible.\nThe extent to which some parameters are negligible can be quantified and one may try to simply remove these negligible weights. By removing useless parameters, models get lighter. This process is called pruning. Pruning - individual weights or even entire layers - is one class of compression algorithm. Quantization is another one.\nQuantization algorithms typically do not remove weights nor layers directly. The structure of the model stays the same. The number of parameters stays the same.\nWhat is going to change is how much memory is used to store each weight.\nFirst example : na√Øve 32-bit ‚Äî\u0026gt; 16-bit The specifics of data types and how numbers are stored will be covered in the next section. For now, accept that numbers in a computer can be stored and used in computation using either :\n32 bits = 4 bytes of memory per number\n16 bits = 2 bytes of memory per number\nUsually, AI models will have their parameters represented in the computer using the 1st method : 32-bit precision. This allow for very precise calculations as we will explore in the next section.\nHowever, this precision may not be needed to run models. Let‚Äôs try to convert a model from 32-bit precision to 16-bit precision.\n‚Äî\u0026gt; As we cut off memory requirement by half for each parameter, the memory requirement for the model as a whole will also be slashed in half.\nfrom transformers import AutoModelForCausalLM, AutoTokenizer import torch torch.manual_seed(2) # Simple quantization algo on a \u0026#34;small\u0026#34; gpt-2 --\u0026gt; gpu not needed device = \u0026#34;cpu\u0026#34; # load model and its tokenizer (in ram) model_id = \u0026#34;gpt2\u0026#34; model = AutoModelForCausalLM.from_pretrained(model_id).to(device) tokenizer = AutoTokenizer.from_pretrained(model_id) print(\u0026#34;--------------------------------\u0026#34;) print(\u0026#34;What\u0026#39;s the model size in (mega)bytes ?\u0026#34;) model_size_in_bytes = model.get_memory_footprint() print(f\u0026#34;Model memory footprint : {model_size_in_bytes/1e6:.2f} MB\u0026#34;) print(\u0026#34;---------------------------------------------------------\u0026#34;) print(\u0026#34;Quantizing 32-bit --\u0026gt; 16-bit the first layer of the model\u0026#34;) # extract the first layer weights (cf Maxime Labonne\u0026#39;s article code example) weights = model.transformer.h[0].attn.c_attn.weight.data # Layer size in bytes layer_size_in_bytes = weights.element_size() * weights.nelement() print(f\u0026#34;Original layer memory footprint : {layer_size_in_bytes/1e6:.2f} MB\u0026#34;) print(f\u0026#34;Original data type : {weights.dtype}\u0026#34;) print(\u0026#34;Original weights: \\n\u0026#34;, weights) # 32-bit --\u0026gt; 16-bit weights_q = weights.to(torch.float16) # Lighter layer : size cut in half ? new_layer_size_bytes = weights_q.element_size() * weights_q.nelement() print(f\u0026#34;Quantized layer memory footprint : {new_layer_size_bytes/1e6:.2f} MB\u0026#34;) print(f\u0026#34;New data type : {weights_q.dtype}\u0026#34;) print(\u0026#34;New quantized weights: \\n\u0026#34;, weights) print(\u0026#34;---------------------------------------------\u0026#34;) print(\u0026#34;Quantizing 32-bit --\u0026gt; 16-bit the entire model \u0026#34;) # Layer by layer quantization for layer in model.parameters(): layer.data = layer.data.to(torch.float16) # New model memory footprint print(\u0026#34;What\u0026#39;s the quantized model size in (mega)bytes ?\u0026#34;) new_memory_footprint_bytes = model.get_memory_footprint() print(f\u0026#34;Quantized model memory footprint : {new_memory_footprint_bytes/1e6:.2f} MB\u0026#34;) -------------------------------- What\u0026#39;s the model size in (mega)bytes ? Model memory footprint : 510.34 MB --------------------------------------------------------- Quantizing 32-bit --\u0026gt; 16-bit the first layer of the model Original layer memory footprint : 7.08 MB Original data type : torch.float32 Original weights: tensor([[-0.4738, -0.2614, -0.0978, ..., 0.0513, -0.0584, 0.0250], [ 0.0874, 0.1473, 0.2387, ..., -0.0525, -0.0113, -0.0156], [ 0.0039, 0.0695, 0.3668, ..., 0.1143, 0.0363, -0.0318], ..., [-0.2592, -0.0164, 0.1991, ..., 0.0095, -0.0516, 0.0319], [ 0.1517, 0.2170, 0.1043, ..., 0.0293, -0.0429, -0.0475], [-0.4100, -0.1924, -0.2400, ..., -0.0046, 0.0070, 0.0198]]) Quantized layer memory footprint : 3.54 MB New data type : torch.float16 New quantized weights: tensor([[-0.4738, -0.2614, -0.0978, ..., 0.0513, -0.0584, 0.0250], [ 0.0874, 0.1473, 0.2387, ..., -0.0525, -0.0113, -0.0156], [ 0.0039, 0.0695, 0.3668, ..., 0.1143, 0.0363, -0.0318], ..., [-0.2592, -0.0164, 0.1991, ..., 0.0095, -0.0516, 0.0319], [ 0.1517, 0.2170, 0.1043, ..., 0.0293, -0.0429, -0.0475], [-0.4100, -0.1924, -0.2400, ..., -0.0046, 0.0070, 0.0198]]) --------------------------------------------- Quantizing 32-bit --\u0026gt; 16-bit the entire model What\u0026#39;s the quantized model size in (mega)bytes ? Quantized model memory footprint : 261.46 MB This piece of code shows you how you can very easily download a model locally on your machine from the Hugging Face hub. Then, you can built-in utils from the transformers and torch librairies to look at the model size in bytes.\nInitially, weights are stored in the computer using 32 bits. This code forces the weights from 32 bits to a 16 bits representation in memory. This would be analogous to truncating a number in physics to account for the significance of digits. Essentially, we are saying :\n$$\\pi \\simeq 3.141592654 \\simeq 3.1415$$\nfor every parameters of the model. More or less truncating the ‚Äúprecision‚Äù by half 8. See how you don‚Äôt even notice the change in precision with the prints ! But still, precision has been diminished.\nHow is the performance affected ? Let‚Äôs try to benchmark this with :\nQualitative evaluation with a simple inference on a given prompt\nQuantitative measurement of ‚Äúnext token prediction‚Äù with the model perplexity on a given dataset\nN-bit precision and memory footprint calculation will be explained later in the post. Basically, each parameter requires 32 bits / 8 bits per byte = 4 bytes of memory. Thus 70 billions of such parameters amount to 70B * 4 bytes = 280 GB of memory.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nConsidering a ‚Äúsimple‚Äù run where on tries to load the entire model in a single GPU at once. However there are many tactics to run larger model on a GPU than one would expect given the amount of VRAM available (for instance off-loading some layers onto the RAM or even the disk to alleviate the memory pressure on the GPU)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n\u0026ldquo;117M\u0026rdquo; ? Given gpt2 x10 gpt1, must be ~100M\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBig caveat here as we are not comparing apples to apples. GPT-1, 2 and 3 are \u0026lsquo;dense\u0026rsquo; as opposed to the \u0026lsquo;sparse\u0026rsquo; MoE architecture that GPT-4 is believed to be. Same kind of architecture than the popular Mixtrals for instance, where only a subset of all the weights are active in a given inference round.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nI have not read it thoroughly. I just discovered it while writing this post. But as always with EpochAI work it looks great.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThe specifics depends on your training/inference strategy.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n2 clusters of 24 000 GPU. See llama 3 introduction post (section ‚ÄúScaling up pretraining‚Äù).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHow the precision is affected depends on how you use your 32 or 16 bits. More on that in the data type section.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"//localhost:1313/posts/quantization_intro/","summary":"What is quantization ? \u0026lsquo;Quantization\u0026rsquo; refers to a broad class of algorithms. Their goal is to reduce the memory footprint of models while retaining as much performance as possible.\n$$\\text{Quantization} \\sim \\text{reducing the memory footprint of models}$$\nConsider the new Llama 3 70B.\nIf you load it in 32-bit precision on your GPU 1, it will require around (32 / 8) * 70 = 280 GB of VRAM ü•∂. For regular folks with access to 1 or 2 consumer GPUs at best, this memory cost is prohibitive and the model cannot be run 2.","title":"What is quantization in modern AI ?"}]